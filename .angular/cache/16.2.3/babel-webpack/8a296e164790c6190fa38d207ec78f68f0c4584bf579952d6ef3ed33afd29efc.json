{"ast":null,"code":"var _class;\nimport { of } from 'rxjs';\nimport { HttpHeaders } from '@angular/common/http';\nimport { catchError, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./message.service\";\nimport * as i2 from \"@angular/common/http\";\nexport class HeroService {\n  constructor(messageService, http) {\n    this.messageService = messageService;\n    this.http = http;\n    /* //To return an array of mock heroes\n    getHeroes(): Observable<Hero[]> {\n    const heroes = of(HEROES);\n    this.messageService.add('HeroService: fetched heroes');\n    return heroes;\n    }\n    */\n    //The heroes web API expects a special header in HTTP save requests:\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n    this.heroesUrl = 'api/heroes'; // URL to web api\n  }\n  /**\n  * Handle Http operation that failed.\n  * Let the app continue.\n  *\n  * @param operation - name of the operation that failed\n  * @param result - optional value to return as the observable result\n  */\n  handleError(operation = 'operation', result) {\n    return error => {\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n      // TODO: better job of transforming error for user consumption\n      this.log(`${operation} failed: ${error.message}`);\n      // Let the app keep running by returning an empty result.\n      return of(result);\n    };\n  }\n  /** GET heroes from the server */\n  getHeroes() {\n    return this.http.get(this.heroesUrl).pipe(tap(_ => this.log('fetched heroes')), catchError(this.handleError('getHeroes', [])));\n  }\n  /*\n    getHero(id: number): Observable<Hero> {\n      // For now, assume that a hero with the specified `id` always exists.\n      // Error handling will be added in the next step of the tutorial.\n      const hero = HEROES.find(h => h.id === id)!;\n      this.messageService.add(`HeroService: fetched hero id=${id}`);\n      return of(hero);\n    }\n    */\n  /** GET hero by id. Will 404 if id not found */\n  getHero(id) {\n    const url = `${this.heroesUrl}/${id}`;\n    return this.http.get(url).pipe(tap(_ => this.log(`fetched hero id=${id}`)), catchError(this.handleError(`getHero id=${id}`)));\n  }\n  /** PUT: update the hero on the server */\n  updateHero(hero) {\n    return this.http.put(this.heroesUrl, hero, this.httpOptions).pipe(tap(_ => this.log(`updated hero id=${hero.id}`)), catchError(this.handleError('updateHero')));\n  }\n  /** POST: add a new hero to the server */\n  addHero(hero) {\n    return this.http.post(this.heroesUrl, hero, this.httpOptions).pipe(tap(newHero => this.log(`added hero w/ id=${newHero.id}`)), catchError(this.handleError('addHero')));\n  }\n  /** DELETE: delete the hero from the server */\n  deleteHero(id) {\n    const url = `${this.heroesUrl}/${id}`;\n    return this.http.delete(url, this.httpOptions).pipe(tap(_ => this.log(`deleted hero id=${id}`)), catchError(this.handleError('deleteHero')));\n  }\n  /* GET heroes whose name contains search term */\n  searchHeroes(term) {\n    if (!term.trim()) {\n      // if not search term, return empty hero array.\n      return of([]);\n    }\n    return this.http.get(`${this.heroesUrl}/?name=${term}`).pipe(tap(x => x.length ? this.log(`found heroes matching \"${term}\"`) : this.log(`no heroes matching \"${term}\"`)), catchError(this.handleError('searchHeroes', [])));\n  }\n  /** Log a HeroService message with the MessageService */\n  log(message) {\n    this.messageService.add(`HeroService: ${message}`);\n  }\n}\n_class = HeroService;\n_class.ɵfac = function HeroService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.MessageService), i0.ɵɵinject(i2.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["of","HttpHeaders","catchError","tap","HeroService","constructor","messageService","http","httpOptions","headers","heroesUrl","handleError","operation","result","error","console","log","message","getHeroes","get","pipe","_","getHero","id","url","updateHero","hero","put","addHero","post","newHero","deleteHero","delete","searchHeroes","term","trim","x","length","add","i0","ɵɵinject","i1","MessageService","i2","HttpClient","factory","ɵfac","providedIn"],"sources":["/home/omar/Desktop/EA/EA_Angular/src/app/hero.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\nimport { Observable, of } from 'rxjs';\n\nimport { Hero } from './hero';\nimport { HEROES } from './mock-heroes';\nimport { MessageService } from './message.service';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { catchError, map, tap } from 'rxjs/operators';\n\n@Injectable({ providedIn: 'root' })\nexport class HeroService {\n\n  constructor(\n    private messageService: MessageService,\n    private http: HttpClient\n    ) { }\n\n    /* //To return an array of mock heroes\n  getHeroes(): Observable<Hero[]> {\n    const heroes = of(HEROES);\n    this.messageService.add('HeroService: fetched heroes');\n    return heroes;\n  }\n  */\n \n  //The heroes web API expects a special header in HTTP save requests:\n  httpOptions = {\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n  };\n  private heroesUrl = 'api/heroes';  // URL to web api\n\n\n  /**\n * Handle Http operation that failed.\n * Let the app continue.\n *\n * @param operation - name of the operation that failed\n * @param result - optional value to return as the observable result\n */\nprivate handleError<T>(operation = 'operation', result?: T) {\n  return (error: any): Observable<T> => {\n\n    // TODO: send the error to remote logging infrastructure\n    console.error(error); // log to console instead\n\n    // TODO: better job of transforming error for user consumption\n    this.log(`${operation} failed: ${error.message}`);\n\n    // Let the app keep running by returning an empty result.\n    return of(result as T);\n  };\n}\n\n  /** GET heroes from the server */\n  getHeroes(): Observable<Hero[]> {\n    return this.http.get<Hero[]>(this.heroesUrl)\n      .pipe(\n        tap(_ => this.log('fetched heroes')),\n        catchError(this.handleError<Hero[]>('getHeroes', []))\n     );\n  }\n/*\n  getHero(id: number): Observable<Hero> {\n    // For now, assume that a hero with the specified `id` always exists.\n    // Error handling will be added in the next step of the tutorial.\n    const hero = HEROES.find(h => h.id === id)!;\n    this.messageService.add(`HeroService: fetched hero id=${id}`);\n    return of(hero);\n  }\n  */\n\n  /** GET hero by id. Will 404 if id not found */\n  getHero(id: number): Observable<Hero> {\n    const url = `${this.heroesUrl}/${id}`;\n    return this.http.get<Hero>(url).pipe(\n      tap(_ => this.log(`fetched hero id=${id}`)),\n      catchError(this.handleError<Hero>(`getHero id=${id}`))\n    );\n  }\n\n  /** PUT: update the hero on the server */\n  updateHero(hero: Hero): Observable<any> {\n    return this.http.put(this.heroesUrl, hero, this.httpOptions).pipe(\n      tap(_ => this.log(`updated hero id=${hero.id}`)),\n      catchError(this.handleError<any>('updateHero'))\n    );\n  }\n\n  /** POST: add a new hero to the server */\n  addHero(hero: Hero): Observable<Hero> {\n    return this.http.post<Hero>(this.heroesUrl, hero, this.httpOptions).pipe(\n      tap((newHero: Hero) => this.log(`added hero w/ id=${newHero.id}`)),\n      catchError(this.handleError<Hero>('addHero'))\n    );\n  }\n\n  /** DELETE: delete the hero from the server */\n  deleteHero(id: number): Observable<Hero> {\n    const url = `${this.heroesUrl}/${id}`;\n\n    return this.http.delete<Hero>(url, this.httpOptions).pipe(\n      tap(_ => this.log(`deleted hero id=${id}`)),\n      catchError(this.handleError<Hero>('deleteHero'))\n    );\n  }\n\n    /* GET heroes whose name contains search term */\n  searchHeroes(term: string): Observable<Hero[]> {\n    if (!term.trim()) {\n      // if not search term, return empty hero array.\n      return of([]);\n   }\n    return this.http.get<Hero[]>(`${this.heroesUrl}/?name=${term}`).pipe(\n      tap(x => x.length ?\n        this.log(`found heroes matching \"${term}\"`) :\n         this.log(`no heroes matching \"${term}\"`)),\n     catchError(this.handleError<Hero[]>('searchHeroes', []))\n   );\n  }\n\n  /** Log a HeroService message with the MessageService */\n  private log(message: string) {\n  this.messageService.add(`HeroService: ${message}`);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}